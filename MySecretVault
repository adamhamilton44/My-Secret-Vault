#!/bin/bash

#############################
# Author: Adam Hamilton
# Created Date: Thursday-Jan-11-2024
# Time: 03:32-pm
# Purpose: Create copy of files
# encrypt the copied files
# create a encrypted directory
# place files in directory
# Version: v1.1.1
#############################


# Variable COLOR Commands forground
r=$'\e[1;31m' # red IMPORTANT
g=$'\e[1;32m' # green QUESTION
b=$'\e[1;34m' # blue MINIMUM
c=$'\e[1;36m' # cyan STATEMENT
x=$'\e[0m' # reset RESET COLOR
gp='\e[1;33m[++]\e[0m' # green plus GOOD
rms='\e[1;31m[--]\e[0m' # red minus SORRY
er='\e[1;31m[\e[5;31m!!ERROR!!\e[0m\e[1;31m]\e[0m' # red blinking ERROR message
w='\e[1;31m[\e[5;31m-WARNING-\e[0m\e[1;31m]\e[0m' # red blinking WARNING message
p='\e[0;35m' # purple SIMPLE

# Script Variable's
user="$USER"
root=" "
space=" "
name=" "
ok=" "
crypt=" "
answer=" "
dir="pwd"
file=" "
full="$dir/$file"

# set error handling
set -e

# running with sudo encrypts the root folder. Here we give the user the option so if they dont want encryption in root they can back out
check_for_root() {
        if [ "$EUID" -eq 0 ];
        then
                echo -e " \n $w $r running this script as sudo or root will encrypt files in root folder $w "
                echo -e " \n $c If you do not want encryption done in root folder answer [N|n]"
                echo -e " \n $g Continue as root? $r [Y|N] $x "
                read -r root
                        if [[ "$root" =~ ^[Y|y]$  ]]; then
                                echo -e " \n $c OK Lets continue."

                        elif  [[ "$root" =~ ^[N|n]$ ]]; then
                                echo -e " \n $c Script will end now so you can rerun without root. "
                                exit 1

			else
                                echo -e " \n $r Incorrect answer \n $p GOOD BYE"
                                exit 3
			fi
        fi
}

echo '|--------------------------------------------------------------------------------|'
echo '|~~~~~~~~~~~~~~~~~~~~~~~~~~~===$$$$$$$$$$$$$$$$$$$$===~~~~~~~~~~~~~=XXXXX$~~~~~~~|'
echo '|~~~~~~~~~~~~~~~~~~~~~~~==$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$==~~~~~~~~~=XXXXX$~~~~~~~|'
echo '|~~~~~~~~~~$$~~$=~~~~=$$$$$$$$$$=                 ==$$$$$$$$=~~~~~==XXXX $~~~~~~~|'
echo '|~~~~~~~=$$~$$$=~$~=$$$$$$$=           XXX=            =$$$$$$=~~~~=XXXX $~~~~~~~|'
echo '|~~~~~~~~$~$$$$= $$$$$$$       ===== = XXXX    ====       =$$$$=~~~=XXX= $~~~~~~~|'
echo '|~~~~~~~~~$$$$=    =$=     ========= = XXXX     ==          =$$$XXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~~~~$$$==         ==========   XXX=    ====XXXXXXXXXXXXXXXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~~~~~~$$$          =========== XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~~~$=$$$      =$=  =========== XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXA$~~~~~~~|'
echo '|~~~~~~~~~$=$$=    = $$     ========== XXXXXXXXXXXXXXXXXXXXXXXXXXXX=======~~~~~~~|'
echo '|~~~~~~~$$$$       ===========     ======  ===   ===$=XXXXXXXXXX     =$$~$~~~~~~~|'
echo '|~~~~~~~~$$=   = = ============ =     ==   ==  ==   = =XXXXXXXXX      $$~$~~~~~~~|'
echo '|~~~~~~$~$$    =   ============ = =   ==  ==    ===   =XXXXXXXXX      =$~ $~~~~~~|'
echo '|~~~~~~~$$$   ==   =========== == =   secret   = ===  =XXXXXXXXX       $$ ~~~~~~~|'
echo '|~~~~~~~$$$   == = =========== $ =    =$$$$=   =  $   =XXXXXXXXX       $$~~~~~~~~|'
echo '|~~~~~~~$$$   == = =========== $ =    =$$$$=      $   =XXXXXXXXX       $$~~~~~~~~|'
echo '|~~~~~~~$$$   == = =========== == =   vault    = ===  =XXXXXXXXX       $$ ~~~~~~~|'
echo '|~~~~~~$~$$    = = ============ = =   ==  =     ===   =XXXXXXXXX      =$~ $~~~~~~|'
echo '|~~~~~~~~$$=   = = ============ =     =   ==   ==   = =XXXXXXXXX      $$~$~~~~~~~|'
echo '|~~~~~~~$$$$       ===========     ======  ===   ==== XXXXXXXXXX     =$$~$=~~~~~~|'
echo '|~~~~~~~~~$=$$=    = $$     ========== XXXXXXXXXXXXXXXXXXXXXXXXXXXXX======~~~~~~~|'
echo '|~~~~~~~~~~$=$$$      =$=  =========== XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXH$~~~~~~~|'
echo '|~~~~~~~~~~~$$$$$           ========== XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~~~~$$$==         ==========   XXX=     ===XXXXXXXXXXXXXXXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~$$$$$=    ==      ========= = XXXX      =         ===XXXXXXXXXX $~~~~~~~|'
echo '|~~~~~~~~$~$$$$=~$$~$$$=        ==== = XXXX    ====       =$$===XXX XXX= $~~~~~~~|'
echo '|~~~~~~~~$$~$$$==$~~$$$$$$$=           XXX=            =$$$$$$~~~~~~XXXX $~~~~~~~|'
echo '|~~~~~~~~~~$$~~$=~~~~~$$$$$$$$$==                 =$$$$$$$$$~~~~~~~~XXXX $~~~~~~~|'
echo '|~~~~~~~~~~~~~~~~~~~~~~~~~$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$~~~~~~~~~~~~XXXXX$~~~~~~~|'
echo '|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$$$$$$$$$$$$$$$$$$$$$~~~~~~~~~~~~~~~~=XXXXX$~~~~~~~|'
echo '|--------------------------------------------------------------------------------|'


####################
# START OF SCRIPT  #
####################
sleep 3
clear

check_for_root

# giving the user information needed and option's to back out
echo -e " \n $c When using this script i have color coded different parts to help understand some information."
echo -e " \n $p This color is minimal information you can skip most of it."
echo -e " \n $c This color is normal information i need to relay to you. "
echo -e " \n $g This color is me waiting for $user's input. "
echo -e " \n $r THIS IS IMPORTANT INFORMATION PLEASE READ!!!"
echo -e " \n $er $r LETS HOPE WE DONT SEE THIS MESSGAE!!!! $er $x "
echo -e " \n $g Press any key to continue."
read -r -n 1 -s -r
clear

echo -e " \n $c Before we begain i need to ask a couple questions, and give you some information."
echo -e " \n $c First i want you to understand your original file $r WILL NOT $c be encrypted or overwriten."
echo -e " \n $c This program only makes a copy and then encrypts the copy."
echo -e " \n $c $gp This is for the safety of your files. $gp $x"
echo -e " \n $g Press any key to continue."
read -r -n 1 -s -r
clear

echo -e " \n $r To understand the details please read this information carefully."
echo -e " \n $c This script will make a new folder in your $HOME directory $r Example: $HOME/.secret"
echo -e " \n $c This script will also create a key that is stored in the folder. $r Example: secret.tomb.key"
echo -e " \n $c The new folder will be a .(dot) file and the key name will be the same as the folder name. $r Example: $HOME/.secret/secret.tomb.key"
echo -e " \n $c The directory name will be your choice, Keep in mind the name you choose will also be the name of a new hidden/encrypted folder and key name."
echo -e " \n $r The ONLY WAY to open the hidden/encrypted folder will be from inside the $HOME/.secret folder where your secret.tomb.key is stored."
echo -e " \n $c The $HOME/.secret/ folder will be $r 1 gb (1024 MiB) in size. $c You can grow larger as needed but can never shrink."
echo -e " \n $c So again to open the secret folder you will $p cd $c into your $HOME/.secret folder and if you $p ls $c you will see 2 files $r 'secret.tomb and secret.tomb.key'$x"
echo -e " \n $c To unlock the secret folder you will also need a password we will ask you for that soon. "
echo -e " \n $c Once secret folder is created we will open the folder (password needed again), and then encrypt you file (new password needed for file encryption)."
echo -e " \n $c So in total you need a key and password for the secret folder, and another password for encrypting/decrypting files. (passwords can be the same or not you choice)"
echo -e " \n $c finally when you use the key and passowrd to open the hidden/encrypted folder it will be located in your /media directory. $r Example: /media/secret."
echo -e " \n $c To make sure you understand only answer 'Y|y' or 'N|n' when asked a yes or no question, any other keys and script dies $x"
echo -e " \n $g Press any key to continue, yes any key here is fine."
read -n 1 -s -r
clear

# double checking user understands all information and presses the correct keys to show they understand
echo -e " \n $g Do you have the available space in your home directory? [Y] or [N] "
read -r space
if [[ "$space" =~ ^[Y|y]$ ]];
then
        echo -e " \n $gp $p OK good, couple more question's before we begin. $gp $x"

elif [[ "$space" =~ ^[N|n]$ ]];
then
        echo -e  " \n $rms OK, sorry we couldnt help today. $rms $x"
	exit 2

else
        echo -e "\n $er $r Incorrect answer $er $g Y|y or N|n $r ONLY $x \n $p good bye $x"
        exit 3

fi

# ask user if encrypted space is ok
echo -e " \n $g And are you ok with encrypted disk space in your $HOME directory? [Y] or [N] $x "
read -r crypt
if [[ "$crypt" =~ ^[Y|y]$ ]];
then
        echo -e " \n $gp $p OK good, We are almost there. $gp $x"

elif [[ "$crypt" =~ ^[N|n]$ ]];
then
        echo -e  " \n $rms OK, sorry we couldnt help today. $rms $x"
	exit 2

else
        echo -e "\n $er $r Incorrect answer $er $g Y|y or N|n $r ONLY $x \n $p good bye $x"
        exit 3

fi

# making sure user is in the correct directory of the files they want encrypted exit if not
echo -e " \n $g Are you in the directory of the file(s) you want to encrypt? [Y] or [N] $x"
read -r answer

if [[ "$answer" =~ ^[Y|y]$ ]];
then
	dir="$PWD"
	echo -e " \n $g Please enter the file name $x"
	read -r file

elif [[ "$answer" =~ ^[N|n]$ ]];
then
	echo -e " \n $r Please move to the directory where the file(s) you want to encrypt are located then rerun this script $x"
	exit 2

else
	echo -e " \n $er $r Incorrect answer $er $g  Y|y or N|n $r ONLY $x \n $p good bye $x"
	exit 3

fi

# directory and file name variable
full="$dir/$file"

# checking that file exists
if [ -f "$full" ]
then
        cd "$dir" || return
else
        echo -e " \n $er $r $full is not found $er \n \n \n $c check spelling and path then rerun the script $x"
        exit 3
fi

clear

# making sure user knows we may need to download some packages
echo -e " \n $p I need to check and install some packages if not downloaded already: tomb and ccrypt."
echo -e " \n $c  You may be asked for your password to download the needed files. $x"
read -n 1 -s -r -p "Press any key when ready..."

# checking for packages and downloading if not installed
if [ -f /usr/bin/tomb ] && [ -f /usr/bin/ccrypt ];
then
	echo "tomb and ccrypt installed already"
else
        echo "Installing packages"
        sudo apt update; sudo apt install -y tomb ccrypt
fi

clear

# more information for user and making sure they understand by typing 123 or exit
echo -e " \n $c OK in a minute you will be asked for a new password this will be for the encrypted folder."
echo -e " \n $r IF YOU FORGET PASSWORD OR LOSE SECRET KEY SAY GOODBYE TO YOUR FILES"
echo -e " \n $c Once directory is created you will need to enter password again to open"
echo -e " \n $c Once opened we will copy and encrypt your file."
echo -e " \n $r The encrypted file will also need a new password $x "
echo -e " \n $g when you are ready type '123' without the 'commas' then press [enter] or [return] key  $x"
read -r ok

# make sure user did answer correctly before we continue
if [ "$ok" = "123" ];
then
	echo " $gp "
else
	echo -e " \n $er $r You didnt type 123 and [enter] OR [return] key, script will end now! $er $x"
	exit 4

fi
clear

# ask user for new folder name WITHOUT a [.] or [SPACE]
echo -e " \n $g Please give me a name (1 word without the .dot) for the folder/directory and key that will be produced. $r Example: secret $x "
read -r name

if [ -z "$name" ];
then
	echo -e " \n $er $r INVALID DIRECTORY NAME $er "
        echo -e " \n $b good bye "
        exit 5


elif [[ "$name" == .* ]];
then
        echo -e " \n $er $r INVALID DIRECTORY NAME no [. dot ] let me take care of that. $er "
        echo -e " \n $b good bye "
        exit 55


elif [[ "$name" =~ \  ]];
then
        echo -e " \n $er $r INVALID DIRECTORY NAME 1 word no spaces $er "
        echo -e " \n $b good bye "
        exit 555

else
        echo -e " \n $gp $c new name for directory will be $name $gp  "
fi

# tomb & ccrypt starting
cd "$HOME" || return
mkdir ".$name"
chmod 700 ".$name"
cd ".$name" || return
tomb dig -s 1024 "$name.tomb"
echo -e " $c OK we have created a folder in your home directory, next we will need a password to create a key we will ask 2 times to make sure both are same. \n $g Press any key when you are ready.  "
read -r -n 1 -s
tomb forge -f "$name.tomb.key"
echo -e " $c Awesome job so far so good. Now you will be ask for the password you just supplied  to close the secret folder \n this is the only time you will be asked for a password to close the secret folder. \n $g Press any key when you are ready. "
read -r -n 1 -s
tomb lock "$name.tomb" -k "$name.tomb.key"
echo -e " $c Nice almost done, now we need to open the secret folder to place your file inside, yes password you created is needed again. \n $g Press any key when you are ready. "
read -r -n 1 -s
tomb open -f "$name.tomb" -k "$name.tomb.key"
< "$full" base64 > "$file.txt.b64"
mv "$file.txt.b64" "/media/$name/$file.txt.b64"
cd "/media/$name/" || return
echo -e " $c So far at this point everything looks good. You need to enter a password again to encrypt the file $r This password can be the same or new \n $c Just keep in mind 1st password was for encrypted folder creation, next password is for encrypting the file. \n $g Press any key when you are ready.  "
read -r -n 1 -s
ccrypt -f -v "$file.txt.b64"
cd "$dir" || return
tomb close
echo -e " $c All done. I have a bit of information to share, \n $g Press any key when you are ready.  "
read -r -n 1 -s

# giving user all needed information and also making a copy for the user to look back on
echo  -e " $r READ CAREFULLY: "
echo "   "
echo " 1. Your key to unlocking the tomb is located in '$HOME/.$name " | tee encrypt-decrypt-help.txt
echo " 2. When locking or unlocking  encrypted directory always start in your '$HOME/.$name' " | tee -a encrypt-decrypt-help.txt
echo " 3. Once you give the command tomb will open as a external drive in '/media/.$name'" | tee -a encrypt-decrypt-help.txt
echo " 4. Copy/paste the commands below if you like but i also made a txt file with commands for you."
echo " " | tee -a encrypt-decrypt-help.txt
echo " UNLOCK and DECRYPT: " | tee -a encrypt-decrypt-help.txt
echo " 1. cd $HOME/.$name " | tee -a encrypt-decrypt-help.txt
echo " 2. tomb open -f $name.tomb -k $name.tomb.key" | tee -a encrypt-decrypt-help.txt
echo " 3. cd /media/$name " | tee -a encrypt-decrypt-help.txt
echo " 4. ccrypt -d $file.txt.b64.cpt" | tee -a encrypt-decrypt-help.txt
echo " 5. < $file.txt.b64 | base64 -d > $file.txt" | tee -a encrypt-decrypt-help.txt
echo " " | tee -a encrypt-decrypt-help.txt
echo " LOCK and ENCRYPT FILES: " | tee -a encrypt-decrypt-help.txt
echo " 1. cd $HOME/.$name " | tee -a encrypt-decrypt-help.txt
echo " 2. tomb open -f $name.tomb -k $name.tomb.key" | tee -a encrypt-decrypt-help.txt
echo " 3. cd /media/$name " | tee -a encrypt-decrypt-help.txt
echo " 4. < $full | base64 > $file.txt.b64> " | tee -a encrypt-decrypt-help.txt
echo " 5. ccrypt -f -v $file.txt.b64 " | tee -a encrypt-decrypt-help.txt
echo " 6. cd $HOME" | tee -a encrypt-decrypt-help.txt
echo " 7. tomb close " | tee -a encrypt-decrypt-help.txt
echo -e " $g Press any key to continue.  "
read -n 1 -s -r
echo -e " $c  I saved a txt file for you named $r 'encrypt-decrypt-help.txt' $c in your current directory. "
echo -e " $c And as a added gift for using my script i will add information on how to hide your key inside a .jpg picture and i added some .jpg pictures to use."
echo " " | tee -a encrypt-decrypt-help.txt
echo " HIDE/EXTRACT SECRET KEY from A .JPG PICTURE: " | tee -a encrypt-decrypt-help.txt &>/dev/null
echo " Hide key in .jpg ==> tomb bury -k $name.tomb.key abstract-smoke.jpg -g -r $USER " | tee -a encrypt-decrypt-help.txt
echo " Extract key from .jpg ==> tomb exhume -k $name.tomb.key abstract-smoke.jpg " | tee -a encrypt-decrypt-help.txt
echo -e " $c We are done. Thank you, have a great day. \n $g press any key to finish.  "
read -n 1 -s -r
exit 0
#################
# END OF SCRIPT #
#################
